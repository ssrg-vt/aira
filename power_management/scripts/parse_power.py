#! /usr/bin/python3

import sys

###############################################################################
# Configuration
###############################################################################

infile = "data.csv"
outfile = "power.csv"
numIters = 1
summarize = True
hertz = 1000.0
lines = []
triggerLine = 0
removeNontriggered = False

###############################################################################
# Helpers
###############################################################################

def printHelp():
	global outfile
	global hertz

	print("parse_power.py: parse raw power data generated by DAQ and output results\n")
	print("Usage: ./parse_power.py [ OPTIONS ]")
	print("Options:")
	print("  -h | --help     : print help & exit")
	print("  -i file         : input file (CSV generated from NI tools)")
	print("  -o file         : output file, default is " + outfile)
	print("  -f frequency    : measurement frequency, default is " + str(hertz))
	print("  -l #,#,#,#,desc : input line (channel, line voltage, resistance, multiplier, and description), can be specified multiple times")
	print("  -r              : remove values with negative trigger, i.e. non-triggered values")
	print("  -a val          : average over 'val' iterations")

###############################################################################
# Parsing
###############################################################################

def parseFile(infile, lines, hertz, removeNontriggered, triggerLine, numIters):
	data = {
		'num_readings' : 0,
		'readings' : [ [] for i in range(len(lines)) ],
		'energy' : 0.0
	}

	infp = open(infile, 'r')
	header = infp.readline() # Do anything with it?

	# Convert requested lines to columns
	columns = []
	columnHeaders = header.strip().split()
	for line in lines:
		for i in range(len(columnHeaders)):
			devNum = int(columnHeaders[i].replace("chassis-power-monitor\\ai", ""))
			if line[0] == devNum:
				columns.append(i)
				break
	assert len(columns) == len(lines)

	# Read in data
	nonTriggeredStart = sys.maxsize
	rawData = [ [] for i in range(len(lines)) ]
	for dline in infp:
		readings = dline.split()
		if float(readings[triggerLine]) < 0.0 and len(rawData[0]) < nonTriggeredStart:
			nonTriggeredStart = len(rawData[0])
		for i in range(len(lines)):
			reading = abs(float(readings[columns[i]]))
			amps = reading / lines[i][2] * lines[i][3]
			watts = lines[i][1] * amps
			rawData[i].append(watts)
	infp.close()

	# Average over numIters iterations
	if numIters > 1:
		assert (len(rawData[0]) % numIters) == 0
		numPerIter = int(len(rawData[0]) / numIters)
		averagedLines = [ [] for i in range(len(lines)) ]
		for i in range(numPerIter):
			for j in range(len(lines)):
				curAverage = 0.0
				for k in range(numIters):
					curAverage += rawData[j][i + (k * numPerIter)]
				averagedLines[j].append(curAverage / numIters)
	else:
		averagedLines = rawData

	# Remove non-triggered data
	if removeNontriggered:
		for i in range(len(averagedLines)):
			averagedLines[i] = averagedLines[i][:nonTriggeredStart]

	# Some final accounting & cleanup
	data['num_readings']  = len(averagedLines[0])
	for i in range(len(lines)):
		data['readings'][i] = averagedLines[i]
		for j in range(len(data['readings'][i])):
			data['energy'] += data['readings'][i][j] * (1.0 / hertz)
	return data

###############################################################################
# Printing
###############################################################################

def writeOutput(outfile, lines, data):
	outfp = open(outfile, 'w')

	# Header
	row = ""
	for line in lines:
		row += line[4] + ","
	outfp.write(row[:-1] + "\n")

	# Data
	for i in range(data['num_readings']):
		row = ""
		total = 0.0
		for j in range(len(data['readings'])):
			row += str(data['readings'][j][i]) + ","
			total += data['readings'][j][i]
		row += str(total)
		outfp.write(row + "\n")

	outfp.close()

def summarize(lines, hertz, data):
	print("***********")
	print("* SUMMARY *")
	print("***********\n")

	print("Measured power on " + str(len(lines)) + " lines")
	print("Number of readings: " + str(data['num_readings']))
	print("Measurement frequency: " + str(hertz) + "Hz")
	print("Total energy: " + str(data['energy']) + "J")

###############################################################################
# Driver
###############################################################################

skip = True
for i in range(len(sys.argv)):
	if skip == True:
		skip = False
		continue
	elif sys.argv[i] == "-h" or sys.argv[i] == "--help":
		printHelp()
		sys.exit(0)
	elif sys.argv[i] == "-i":
		infile = sys.argv[i+1]
		skip = True
	elif sys.argv[i] == "-o":
		outfile = sys.argv[i+1]
		skip = True
	elif sys.argv[i] == "-f":
		frequency = float(sys.argv[i+1])
		skip = True
	elif sys.argv[i] == "-l":
		split = sys.argv[i+1].strip().split(',')
		lines.append([ int(split[0]), \
									 float(split[1]), float(split[2]), float(split[3]), \
									 split[4] ])
		skip = True
	elif sys.argv[i] == "-r":
		removeNontriggered = True
	elif sys.argv[i] == "-a":
		numIters = int(sys.argv[i+1])
		skip = True
	else:
		print("WARNING: unknown argument " + sys.argv[i])

if len(lines) == 0:
	lines = [ [0, 12.0, 0.1, 2.0, "12V CPU"],
						[1, 12.0, 0.1, 2.0, "12V motherboard"], 
						[2, 5.0, 0.1, 1.0, "5V motherboard"],
						[4, 3.3, 0.1, 1.0, "3.3V motherboard"],
						[5, 12.0, 0.1, 2.0, "12V GPU (ATX 6-pin)"],
						[6, 12.0, 0.1, 2.0, "12V GPU (ATX 8-pin)"],
						[7, 12.0, 0.1, 2.0, "12V GPU (PCIe)"] ]

data = parseFile(infile, lines, hertz, removeNontriggered, triggerLine, numIters)
writeOutput(outfile, lines, data)
summarize(lines, hertz, data)

